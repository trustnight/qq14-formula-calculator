name: Build Windows EXE

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PySide6==6.5.2
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Check Python and PySide6
        run: |
          python --version
          pip show PySide6

      - name: Convert PNG to ICO
        run: |
          python -c "from PIL import Image; Image.open('icon/logo_use.png').save('icon/logo_use.ico')"

      - name: Build EXE with PyInstaller
        run: |
          pyinstaller --noconfirm --clean main.spec

      - name: Copy README to dist
        shell: pwsh
        run: |
          Copy-Item README.md dist/

      - name: Copy requirements.txt to dist
        shell: pwsh
        run: |
          Copy-Item requirements.txt dist/

      - name: List dist directory
        run: |
          dir dist

      - name: Upload EXE and all files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: qq14-formula-calculator-exe
          path: dist/**

      - name: Create Release and Upload EXE
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: dist/qq14-formula-calculator.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old releases (keep only latest 1)
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            // 按创建时间降序（最新的在前）
            const vReleases = releases.data
              .filter(r => r.tag_name.startsWith('v'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const toDelete = vReleases.slice(1); // 保留最新1个
            for (const rel of toDelete) {
              console.log(`Deleting release ${rel.tag_name}`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: rel.id
              });
            }

      - name: Delete old tags (keep only latest 1)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags
          tags=$(git tag --sort=-creatordate | grep '^v' | tail -n +2)
          for tag in $tags; do
            echo "Deleting tag $tag"
            git push --delete origin $tag
          done
        shell: bash